name: 'Build, Scan and Sign image using Trivy and Cosign'
description: |
  Generally speaking when scanning a container you should generate an SBOM and then scan the resulting
  image to ensure you know exactly what vulnerabilities exist within the image and any packages used within it.
  
  This action enables that process. On top of that, it signs the image
  with [Sigstore Cosign](https://github.com/sigstore/cosign) so that you can validate the image and be confident the one
  you're using is the one you built, as you built it.
  
  Whilst nothing can catch everything, this gives a decent view of what is going on within an image.
  
  ## Why?
  
  Some container registries provide scanning and signing support as part and parcel of their service. However, some do
  not. This action provides consistency and enables the scanning and signing of your containers during the build process,
  not after the push.
  
  ## Scanning with Trivy
  
  Trivy is used to scan the images and
  a [trivyignore](https://aquasecurity.github.io/trivy/v0.22.0/vulnerability/examples/filter/#by-vulnerability-ids) file
  can be supplied to ignore certain CVEs if desired.
  
  If you wish to use a trivyignore file, then you can store it in the repo that calls this action.
  Make sure you run `actions/checkout@v4` before calling this action and pass the `trivyignore-file` input parameter.
  It will automatically be used if the S3 option isn't explicitly enabled.

  For example:
  
    ```yaml
  steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        - name: Build, Scan and Sign Image
          uses: drewbernetes/container-security-action@v0.0.4
          with:
            image-repo: "drewviles"
            repo-username: ${{ secrets.DOCKER_USER }}
            repo-password: ${{ secrets.DOCKER_PASSWORD }}
            image-name: "csa-demo"
            image-tag: "1.0"
            check-severity: "HIGH,CRITICAL"
            trivyignore-file: "trivyignore"
            add-latest-tag: "true"
            publish-image: "true"
            cosign-private-key: ${{secrets.COSIGN_KEY}}
            cosign-password: ${{secrets.COSIGN_PASSWORD}}
            cosign-tlog: false
            dockerfile-path: .
    ```
  
    If you wish to use the S3 approach, to prevent constantly pushing updated trivyignore files to the source repo, then you
  can supply the following:
  
    ```yaml
  steps:
      - name: Build, Scan and Sign Image
        uses: drewbernetes/container-security-action@v0.0.4
        with:
          image-repo: "your-registry.example.com/some-project"
          repo-username: ${{ secrets.REGISTRY_PUBLIC_USER }}
          repo-password: ${{ secrets.REGISTRY_PUBLIC_PASSWORD }}
          image-name: "csa-demo"
          image-tag: "1.0"
          check-severity: "MEDIUM,HIGH,CRITICAL"
          trivyignore-from-s3: true
          s3-endpoint: "https://s3.example.com"
          s3-access-key: ${{secrets.S3_ACCESS_KEY}}
          s3-secret-key: ${{secrets.S3_SECRET_KEY}}
          s3-bucket: "trivyignores"
          s3-path: "image-ignorefile"
          add-latest-tag: "false"
          publish-image: "true"
          cosign-private-key: ${{secrets.COSIGN_KEY}}
          cosign-password: ${{secrets.COSIGN_PASSWORD}}
          cosign-tlog: true
          dockerfile-path: .
    ```
  
    If you also supply the `trivyignore-file` input when using the above, then this will be used as the resulting filename
    when the trivyignore file is pulled from s3. It won't use any file in the source repo as S3 overrides local trivyignore
    files.
  
    ## Signing images with Cosign
  
    The Cosign image signing works by using the standard process used by Cosign.
    You will need to generate
    the [Cosign keys as described in their documentation](https://docs.sigstore.dev/key_management/overview/) and store
    these as a secret in GitHub.
    This can then be supplied via the `cosign-private-key` and `cosign-password` inputs.
  
    ## Publishing Results
  
    The resulst of the scan will be uploaded as artifacts within the repo however, if you have it enabled, you can have 
    this pushed to the GitHub Dependency graph instead by adding the following input parameters:
    
    ```
    enable-dependency-graph: true
    dependency-graph-token: ${{ secrets.GITHUB_TOKEN }}
    ```
  
    **Hardware token verification is currently not supported.**
    ## TODO (AKA nice to haves but may not come!):
  
    * Support dynamic key generation for Cosign.
    * Support OIDC cosign signing.
    * Support adding to Rekor (currently does not do this by default to prevent any private images being added when the user
    may not want this to happen)

branding:
  icon: layers
  color: purple
inputs:
  image-repo:
    description: "The repo to push the image to. This should just be the base url, eg: my-repo or ghcr.io or, if using DockerHub, just the username you'd usually use for your repo."
    required: true
  repo-username:
    description: "The username to log into the repo."
    required: true
  repo-password:
    description: "The password to log into the repo."
    required: true
  image-name:
    description: "The name of the image to build."
    required: true
  image-tag:
    description: "The tag to build the image with - provide a matrix to build against multiple tags as each will need to be SBOM'd, scanned and signed independently."
    required: true
  add-latest-tag:
    description: "Adds the latest tag to the build."
    required: false
    default: "false"
  cosign-private-key:
    description: "A private key with which to sign the image using cosign."
    required: true
  cosign-password:
    description: "The password to unlock the private key."
    required: true
  cosign-tlog:
    description: "Set to true to upload to tlog for transparency."
    required: false
    default: 'false'
  publish-image:
    description: "If true the image will be published to the repo."
    default: 'false'
    required: false
  check-severity:
    description: "A comma deliminated (uppercase) list of severities to check for. If found the pipeline will fail. Support values: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
    required: false
    default: high
  sbom-fail-on-detection:
    description: "Must be 0 to succeed or any other number to fail if a severity is discovered at the `check-severity` level. This will be used as the exit code for the Trivy SBOM scan and 1 is recommended to differentiate it from the scan exit code."
    required: false
    default: "1"
  scan-fail-on-detection:
    description: "Must be 0 to succeed or any other number to fail if a severity is discovered at the `check-severity` level. This will be used as the exit code for the Trivy scan and 2 is recommended to differentiate it from the SBOM exit code."
    required: false
    default: "2"
  trivyignore-file:
    description: "Supply a Trivy ignore file to ignore specific CVEs and prevent a pipeline failure."
    required: false
    default: "trivyignore"
  trivyignore-from-s3:
    description: "If disabled, the trivyignore can be supplied via the repo itself but actions/checkout@v4 must be used before calling this action."
    required: false
    default: "false"
  enable-dependency-graph:
    description: "Will upload the SBOM to GitHub Dependency Graph - you must enable this and enable write permissions on your workflow for this to work."
    required: false
    default: "false"
  dependency-graph-token:
    description: "This can be a PAT or the GITHUB_TOKEN secret"
    required: false
  s3-endpoint:
    description: "If the endpoint isn't a standard AWS one, pass it in here."
    required: false
    default: "https://some-s3-endpoint.com"
  s3-region:
    description: "The AWS Region."
    required: false
    default: "us-east-1"
  s3-access-key:
    description: "The S3 access key."
    required: false
    default: ""
  s3-secret-key:
    description: "The S3 secret key."
    required: false
    default: ""
  s3-bucket:
    description: "The S3 bucket in which the trivyignore file is stored."
    required: false
    default: "trivy"
  s3-path:
    description: "The path in the s3 bucket to the trivyignore file."
    required: false
    default: "trivyignore"
  dockerfile-path:
    description: "Path to the Dockerfile (default {context}/Dockerfile)."
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    - name: Pull From S3
      if: inputs.trivyignore-from-s3 == 'true'
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.s3-access-key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.s3-secret-key }}
        AWS_DEFAULT_REGION: ${{ inputs.s3-region }}
      run: |
        aws --endpoint-url=${{ inputs.s3-endpoint }} s3 cp s3://${{ inputs.s3-bucket }}/${{ inputs.s3-path }} ${{ inputs.trivyignore-file }}

    - name: Determine Registry and Tags
      shell: bash
      run: |
        # Determine image registry
        IS_DOCKERHUB="true"
        REPO="${{ inputs.image-repo }}"
        
        if echo "${{ inputs.image-repo }}" | grep -E -q '\.'; then
          IS_DOCKERHUB="false"
        fi
        
        if [ "${{ inputs.image-repo }}" == "ghcr.io" ]; then
          REPO="${{ inputs.image-repo }}/${{ inputs.repo-username }}"
        fi
        
        echo "IS_DOCKERHUB=${IS_DOCKERHUB}" >> "$GITHUB_ENV"
        echo "REPO=${REPO}" >> "$GITHUB_ENV"
        
        # Determine tags
        VERSION_TAG="${{ inputs.image-tag }}"
        echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_ENV"
        
        # Create a tags array
        TAGS=("${VERSION_TAG}")
        
        # Check if 'latest' tag is required
        if [[ "${{ inputs.add-latest-tag }}" == "true" ]]; then
          LATEST_TAG="latest"
          # Add 'latest' tag to the TAGS array
          TAGS+=("${LATEST_TAG}")
        
          echo "LATEST_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"
        fi
        
        echo "TAGS=${TAGS}" >> "$GITHUB_ENV"

    - name: Build Docker Image and Tag
      shell: bash
      run: |
        for tag in ${TAGS[@]}; do
          docker buildx build -t ${{ env.REPO }}/${{ inputs.image-name }}:${tag} -f "${{inputs.dockerfile-path}}/Dockerfile" .
        done

    # Create an SBOM file for the local image and upload the results
    - name: Create SBOM
      if: inputs.enable-dependency-graph == 'false'
      uses: aquasecurity/trivy-action@0.24.0
      id: create-sbom
      with:
        scan-type: image
        format: spdx-json
        vuln-type: ''
        scanners: ''
        severity: ''
        output: "${{ inputs.image-name }}-sbom.spdx.json"
        image-ref: "${{ env.REPO }}/${{ inputs.image-name }}:${{ env.VERSION_TAG }}"
    #        image-ref: "local/${{ inputs.image-name }}:${{ inputs.image-tag }}"

    # Create an SBOM file for the local image and upload the results
    - name: Create SBOM to Dependency Graph
      if: inputs.enable-dependency-graph == 'true'
      uses: aquasecurity/trivy-action@0.24.0
      id: create-sbom-deps
      with:
        scan-type: image
        format: github
        vuln-type: ''
        scanners: ''
        severity: ''
        output: "${{ inputs.image-name }}-sbom.spdx.json"
        image-ref: "${{ env.REPO }}/${{ inputs.image-name }}:${{ env.VERSION_TAG }}"
        github-pat: ${{ inputs.dependency-graph-token }}
    #        image-ref: "local/${{ inputs.image-name }}:${{ inputs.image-tag }}"

    # Upload the SBOM
    - name: Upload SBOM
      if: inputs.enable-dependency-graph == 'false' && (success() || failure())
      uses: actions/upload-artifact@v4
      with:
        name: "${{ inputs.image-name }}-sbom.spdx.json"
        path: "${{ inputs.image-name }}-sbom.spdx.json"

    # Scan the SBOM
    - name: Scan SBOM
      if: inputs.enable-dependency-graph == 'false'
      uses: aquasecurity/trivy-action@0.24.0
      id: scan-sbom
      with:
        scan-type: sbom
        exit-code: ${{ inputs.sbom-fail-on-detection }}
        ignore-unfixed: true
        format: json
        scan-ref: "${{ inputs.image-name }}-sbom.spdx.json"
        output: "${{ inputs.image-name }}-sbom-results.json"
        vuln-type: ''
        scanners: ''
        severity: ${{ inputs.check-severity }}
        trivyignores: ${{ inputs.trivyignore-file }}

    # Upload the SBOM scan results regardless of scan pass or failure
    - name: Upload SBOM Scan Results
      uses: actions/upload-artifact@v4
      if: (success() || failure()) && (steps.scan-sbom.conclusion == 'success' || steps.scan-sbom.outcome == 'failure') && inputs.enable-dependency-graph == 'false'
      with:
        name: "${{ inputs.image-name }}-sbom-results.json"
        path: "${{ inputs.image-name }}-sbom-results.json"

    # Scan the local image
    - name: Scan image
      id: image-scan
      uses: aquasecurity/trivy-action@0.24.0
      with:
        #        image-ref: "local/${{ inputs.image-name }}:${{ inputs.image-tag }}"
        image-ref: "${{ env.REPO }}/${{ inputs.image-name }}:${{ env.VERSION_TAG }}"
        format: 'json'
        output: 'trivy-results.json'
        exit-code: ${{ inputs.scan-fail-on-detection }}
        ignore-unfixed: true
        scanners: 'vuln,secret,config'
        severity: ${{ inputs.check-severity }}
        trivyignores: ${{ inputs.trivyignore-file }}

    # Upload the image scan results regardless of scan pass or failure
    - name: Upload Container Scan Results
      uses: actions/upload-artifact@v4
      if: (success() || failure()) && (steps.image-scan.conclusion == 'success' || steps.image-scan.outcome == 'failure')
      with:
        name: "${{ inputs.image-name }}-scan-results.json"
        path: "trivy-results.json"

    # Install cosign
    - name: Install Cosign
      if: inputs.publish-image == 'true'
      uses: sigstore/cosign-installer@v3.6.0

    # Login into registry
    ### USING DOCKERHUB ###
    - name: Login to Docker Registry
      if: inputs.publish-image == 'true' && env.IS_DOCKERHUB == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.repo-username }}
        password: ${{ inputs.repo-password }}

    ### USING NON-DOCKERHUB ###
    - name: Login to Container Registry
      if: inputs.publish-image == 'true' && env.IS_DOCKERHUB == 'false'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.image-repo }}
        username: ${{ inputs.repo-username }}
        password: ${{ inputs.repo-password }}

    - name: Push Docker Image
      if: inputs.publish-image == 'true'
      shell: bash
      run: |
        for tag in ${TAGS[@]}; do
          docker push ${{ env.REPO }}/${{ inputs.image-name }}:${tag} 
        done

    - name: Sign Image
      if: inputs.publish-image == 'true'
      shell: bash
      run: |
        for tag in ${TAGS[@]}; do
          DIGEST=$(docker image ls --digests --format "{{.Tag}}@{{.Digest}}" ${{ env.REPO }}/${{ inputs.image-name }})
        
          cosign sign --tlog-upload=${{inputs.cosign-tlog}} --yes --key env://COSIGN_PRIVATE_KEY ${{ env.REPO }}/${{ inputs.image-name }}:${DIGEST}
        done
      env:
        COSIGN_PRIVATE_KEY: ${{inputs.cosign-private-key}}
        COSIGN_PASSWORD: ${{inputs.cosign-password}}
        COSIGN_EXPERIMENTAL: "true"